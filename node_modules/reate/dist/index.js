"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
function isPlainObject(value) {
    if (typeof value !== 'object' || value === null) {
        return false;
    }
    if (Object.getPrototypeOf(value) === null) {
        return true;
    }
    var proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
}
var Reate = /** @class */ (function () {
    function Reate(state, effect) {
        this.state = {};
        this.events = {};
        this.effect = {};
        if (!isPlainObject(state)) {
            throw new Error('state is must be a plain object');
        }
        this.state = state;
        this.effect = effect;
    }
    Reate.prototype.on = function (key, callback) {
        var s = this.events[key];
        if (!s) {
            s = [];
            s.push(callback);
            this.events[key] = s;
        }
        else if (!s.includes(callback)) {
            s.push(callback);
        }
    };
    Reate.prototype.off = function (key, callback) {
        var s = this.events[key];
        if (s) {
            var index = s.indexOf(callback);
            if (index >= 0) {
                s.splice(index, 1);
            }
        }
    };
    Reate.prototype.useState = function (key) {
        var _this = this;
        var _a = react_1.useState(this.state[key]), value = _a[0], setValue = _a[1];
        react_1.useEffect(function () {
            _this.on(key, setValue);
            return function () { return _this.off(key, setValue); };
        }, [key]);
        return value;
    };
    Reate.prototype.setState = function (state) {
        var _this = this;
        if (!isPlainObject(state)) {
            throw new Error('state is must be a plain object');
        }
        Object.keys(state).forEach(function (key) {
            if (_this.state[key] !== state[key]) {
                _this.state[key] = state[key];
                var callbacks = _this.events[key];
                if (callbacks) {
                    callbacks.forEach(function (callback) {
                        callback(state[key]);
                    });
                }
            }
        });
    };
    Reate.prototype.dispatch = function (key, payload) {
        if (typeof this.effect[key] === 'function') {
            return this.effect[key](this, payload);
        }
        throw new Error("effect not found: " + key);
    };
    return Reate;
}());
exports.default = Reate;
