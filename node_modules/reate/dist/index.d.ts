interface State {
    [key: string]: any;
}
declare class Reate<S extends State, E extends {
    [key: string]: (store: Reate<S, any>, payload?: any) => void;
}> {
    private state;
    private events;
    private effect;
    constructor(state: S, effect?: E);
    private on;
    private off;
    useState<K extends keyof S>(key: K): S[K];
    setState(state: Partial<S>): void;
    dispatch<K extends keyof E>(key: K, payload?: any): void;
}
export default Reate;
